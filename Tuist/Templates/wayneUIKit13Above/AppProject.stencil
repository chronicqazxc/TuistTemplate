import ProjectDescription

let configurations: [Configuration] = [
     .debug(name: "Debug", xcconfig: "Targets/{{ name }}/ConfigurationFiles/Debug.xcconfig"),
     .release(name: "Release", xcconfig: "Targets/{{ name }}/ConfigurationFiles/Release.xcconfig"),
 ]

let settings = Settings.settings(base: [:],
                                 configurations: configurations,
                                 defaultSettings: .recommended)

let dependencies: [TargetDependency] = [
    .external(name: "Alamofire"),
    .external(name: "Kingfisher")
]
                                 
func makeAppTargets(name: String) -> [Target] {
    let appTarget = Target(name: name,
                            platform: .iOS,
                            product: .app,
                            bundleId: "com.wayneh.\(name)",
                            deploymentTarget: .iOS(targetVersion: "13.0", devices: [.iphone, .ipad]),
                            infoPlist: InfoPlist.file(path: "./Targets/{{ name }}/Info.plist"),
                            sources: ["Targets/\(name)/Sources/**"],
                            resources: ["Targets/\(name)/Resources/**"],
                            dependencies: dependencies,
                            settings: .settings(
                                base: [
                                    "GENERATE_INFOPLIST_FILE": true,
                                    "INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents": true,
                                    "INFOPLIST_KEY_UILaunchScreen_Generation": true
                                ],
                                configurations: configurations,
                                defaultSettings: .recommended)
    )
    let appTestTarget = Target(name: "\(name)Tests",
                                platform: .iOS,
                                product: .unitTests,
                                bundleId: "com.wayneh.\(name)Tests",
                                deploymentTarget: .iOS(targetVersion: "13.0", devices: [.iphone, .ipad]),
                                infoPlist: .default,
                                sources: ["Targets/\(name)/Tests/**"],
                                dependencies: [.target(name: name)])
    return [appTarget, appTestTarget]
}
                                 
func makeFrameworkTargets(name: String) -> [Target] {
        let sources = Target(name: name,
                platform: .iOS,
                product: .framework,
                bundleId: "com.wayneh.\(name)",
                deploymentTarget: .iOS(targetVersion: "13.0", devices: [.iphone, .ipad]),
                infoPlist: .default,
                sources: ["Targets/\(name)/Sources/**"],
                resources: ["Targets/\(name)/Resources/**"],
                dependencies: [])
        let tests = Target(name: "\(name)Tests",
                platform: .iOS,
                product: .unitTests,
                bundleId: "com.wayneh.\(name)Tests",
                deploymentTarget: .iOS(targetVersion: "13.0", devices: [.iphone, .ipad]),
                infoPlist: .default,
                sources: ["Targets/\(name)/Tests/**"],
                resources: [],
                dependencies: [.target(name: name)])
        return [sources, tests]
}

let targets: [Target] = makeAppTargets(name: "{{ name }}")

let project = Project(name: "{{ name }}",
                      settings: settings,
                      targets: targets
)
